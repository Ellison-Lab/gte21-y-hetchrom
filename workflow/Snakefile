from os.path import realpath
from os.path import split as pathsplit
from os.path import basename
import subprocess
from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
import sys
import random
import json

singularity: "docker://continuumio/miniconda3"
configfile: "config/config.yaml"

rule all:
    input:
        "results/hetchrom-ins/insertions.csv"

rule repeatmasker_hetchrom:
    input:
        repeats = config.get('TRANSPOSON_FASTA',None),
        fasta = config.get('HETCHROM_FASTA'),
    output:
        'results/hetchrom-ins/repeatmasker/' + config.get('HETCHROM_FASTA').split('/')[-1] + '.cat.gz',
        'results/hetchrom-ins/repeatmasker/' + config.get('HETCHROM_FASTA').split('/')[-1] + '.masked',
        'results/hetchrom-ins/repeatmasker/' + config.get('HETCHROM_FASTA').split('/')[-1] + '.out',
        'results/hetchrom-ins/repeatmasker/' + config.get('HETCHROM_FASTA').split('/')[-1] + '.tbl',
    threads:
        24
    params:
        dir = "results/hetchrom-ins/repeatmasker/"
    conda:
        "envs/repeatmasker.yaml"
    resources:
        mem=128000,
        cpus=24,
        time=240,
    shell:
        """
        RepeatMasker -e ncbi -pa {threads} -s \
            -lib {input.repeats} -gff \
            -no_is -nolow -dir {params.dir} \
            {input.fasta}
        """

rule bedops_parse_repeatmasker_y:
    input:
        rpmskr = rules.repeatmasker_hetchrom.output[2],
        lookup = "resources/te_id_lookup.curated.tsv.txt"
    output:
        "results/hetchrom-ins/parsed_by_bedops.tsv"
    conda:
        "envs/bedops.yaml"
    shell:
        """
        rmsk2bed < {input.rpmskr} > {output}
        """

rule r_parse_repeatmasker_y:
    input:
        rules.bedops_parse_repeatmasker_y.output
    output:
        bed_all = "results/hetchrom-ins/insertions.csv"
    conda:
        "envs/bioc-general.yaml"
    script:
        "scripts/parse_rpm_2.R"

# rule parse_repeatmasker_y_old:
#     input:
#         rpmskr = rules.repeatmasker_hetchrom.output[2],
#         lookup = "resources/te_id_lookup.curated.tsv.txt"
#     output:
#         bed_all = "results/hetchrom-ins/insertions.csv"
#     conda:
#         "envs/bioc-general.yaml"
#     script:
#         "scripts/parse_rpm.R"
